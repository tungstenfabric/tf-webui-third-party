diff -Naur old/contrail-webui-third-party/slickgrid.enhancement.pager/slick.enhancementpager.js new/contrail-webui-third-party/slickgrid.enhancement.pager/slick.enhancementpager.js
--- old/contrail-webui-third-party/slickgrid.enhancement.pager/slick.enhancementpager.js	2012-09-30 16:10:48.000000000 -0700
+++ new/contrail-webui-third-party/slickgrid.enhancement.pager/slick.enhancementpager.js	2015-04-13 17:56:52.000000000 -0700
@@ -1,253 +1,250 @@
-ï»¿/**
-* SlickGrid Enhancement Pager
-*
-* An easy-to-use slickgrid pager.
-* https://github.com/kingleema/SlickGridEnhancementPager
-* Released under the MIT license.
-* 
-* Copyright 2012 KingleeMa <https://github.com/kingleema>
-*
-*/
+/**
+ * SlickGrid Enhancement Pager
+ *
+ * An easy-to-use slickgrid pager.
+ * https://github.com/kingleema/SlickGridEnhancementPager
+ * Released under the MIT license.
+ * 
+ * Copyright 2012 KingleeMa <https://github.com/kingleema>
+ *
+ */
 (function ($) {
-    function EnhancementPager(paramObj) {
-        var waiting = parseInt(paramObj.waiting);
-        if (isNaN(waiting)) {
-            waiting = 30000;
-        }
-        $.ajax({
-            url: paramObj.remoteUrl,
-            type: 'POST',
-            cache: false,
-            data: { pageSize: 10, pageIndex: 1 },
-            dataType: "text",
-            crossDomain: true,
-            timeout: waiting,
-            beforeSend: function() {
-                paramObj.container.html('<span class="dataloading">&nbsp;</span>');
-            },
-            error: function (XMLHttpRequest, textStatus, errorThrown) {
-                paramObj.container.html('<span style="position:absolute;top:5px;left:5px;color:red;">Error!&nbsp;' + errorThrown + '</span>');
-            },
-            success: function (data) {
-                var total = $.evalJSON(data).Total;
-                pagecount = parseInt(Math.floor(parseFloat(total / 10)) + 1);
-                initPager(pagecount, paramObj.pagerType, paramObj.trans, waiting);
-                getData(1, paramObj.remoteUrl, paramObj.pagerType, paramObj.params, waiting);
-            }
-        });
-        function initPager(pagecount, pagertype, trans, waiting) {
-          paramObj.container.html('');
-          $('<span class="perpage" title="Records count of per page"><select class="recordsperpage">\
-              <option value="10">10</option>\
-              <option value="25">25</option>\
-              <option value="50">50</option>\
-              <option value="100">100</option>\
-          </select></span>\
-          <span class="spacer">&nbsp;</span>\
-          <span class="pagelabel" style="vertical-align: middle;">Page</span>\
-          <input class="currentpage" title="Current Page" type="text" value="1" style="vertical-align: middle;width:7px" />\
-          <span style="vertical-align: middle;">&nbsp;/&nbsp;</span>\
-          <span id="totalpages" style="vertical-align: middle;">#</span>\
-          <span class="spacer">&nbsp;</span>\
-          <a id="dataloading" href="javascript:;" class="button-base-class refresh" title="Refresh"></a>\
-          <span class="spacer">&nbsp;</span>\
-          <span class="recordstate"><span class="recordstatelabel">Display</span>&nbsp;<span id="recordsegment"></span>&nbsp;/&nbsp;<span id="totalrecords"></span></span>\
-          <a href="javascript:;" class="button-base-class currentrecords" title="Show/Hide Current Records State"></a>').appendTo(paramObj.container);
-            $('.currentpage').keydown(function (e) {
-                if (e.keyCode == 13) {
-                    var changedvalue = 1;
-                    if (isNaN(parseInt($(".currentpage").val()))) {
-                        $(".currentpage").val(changedvalue);
-                    } else {
-                        changedvalue = parseInt($(".currentpage").val());
-                        if (changedvalue < 1) {
-                            changedvalue = 1;
-                        }
-                        if (changedvalue > parseInt($("#totalpages").text())) {
-                            changedvalue = parseInt($("#totalpages").text());
-                        }
-                        $('.currentpage').val(changedvalue);
-                    }
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                }
-            });
-            if (pagertype == "slider") {
-                $('<span class="button-base-class pageminus" title="Previous Page">&nbsp;</span>\
-               <span class="pagerslider"></span>\
-               <span class="button-base-class pageplus" title="Next Page">&nbsp;</span>\
-               <span class="spacer">&nbsp;</span>').insertBefore($('.pagelabel'));
-                if (trans !== null && trans !== undefined) {
-                    $.each(trans, function (k, v) {
-                        if (k != "resultset_first" && k != "resultset_prev" && k != "resultset_next" && k != "resultset_last") {
-                            if (k == "pagelabel" || k == "recordstatelabel") {
-                                $('.' + k).text(v);
-                            } else {
-                                $('.' + k).attr("title", v);
-                            }
-                        }
-                    });
-                }
-                $(".pagerslider").slider({
-                    range: "min",
-                    value: 1,
-                    step: 1,
-                    min: 1,
-                    max: pagecount,
-                    slide: function (event, ui) {
-                        $(".currentpage").css("width", ui.value.toString().length * 7 + "px");
-                        var pd = ui.value;
-                        $(".currentpage").val(pd);
-                    },
-                    stop: function (event, ui) {
-                        var changedvalue = ui.value;
-                        getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                    }
-                });
-                $(".pageplus").click(function () {
-                    if (isNaN(parseInt($(".currentpage").val()))) {
-                        $(".currentpage").val(1);
-                    }
-                    var changedvalue = parseInt($(".currentpage").val()) + 1;
-                    if (changedvalue > parseInt($("#totalpages").text())) {
-                        changedvalue = parseInt($("#totalpages").text());
-                    }
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                });
-                $(".pageminus").click(function () {
-                    if (isNaN(parseInt($(".currentpage").val()))) {
-                        $(".currentpage").val(1);
-                    }
-                    var changedvalue = parseInt($(".currentpage").val()) - 1;
-                    if (changedvalue < 1) {
-                        changedvalue = 1;
-                    }
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                });
-            } else {
-                $('<a href="javascript:;" class="button-base-class resultset_first" title="First Page"></a>\
-               <a href="javascript:;" class="button-base-class resultset_prev" title="Previous Page"></a>\
-               <span class="spacer">&nbsp;</span>').insertBefore($('.pagelabel'));
-                $('<span class="spacer">&nbsp;</span>\
-               <a href="javascript:;" class="button-base-class resultset_next" title="Next Page"></a>\
-               <a href="javascript:;" class="button-base-class resultset_last" title="Last Page"></a>').insertAfter($('#totalpages'));
-                if (trans !== null && trans !== undefined) {
-                    $.each(trans, function (k, v) {
-                        if (k != "pageminus" && k != "pageplus") {
-                            if (k == "pagelabel" || k == "recordstatelabel") {
-                                $('.' + k).text(v);
-                            } else {
-                                $('.' + k).attr("title", v);
-                            }
-                        }
-                    });
-                }
-                $(".resultset_first").click(function () {
-                    var changedvalue = 1;
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                });
-                $(".resultset_prev").click(function () {
-                    if (isNaN(parseInt($(".currentpage").val()))) {
-                        $(".currentpage").val(1);
+	function EnhancementPager(paramObj) {
+		var ajaxPostData = paramObj.params,
+			defaultPageSize = 100,
+			csgCurrentPageDropDown = null, 
+			csgPagerSizesDropdown = null,
+			events = paramObj.events,
+            gridDSConfig = paramObj.gridConfig.body.dataSource,
+            sortable = paramObj.gridConfig.body.options.sortable,
+            timeout = gridDSConfig.remote.timeout;
+		if (isNaN(timeout)) {
+			timeout = 30000;
+		}
+		var postedData = {};
+		postedData['pageSize'] = defaultPageSize;
+        postedData['page'] = 1;
+		if (ajaxPostData !== null && ajaxPostData != undefined) {
+			$.each(ajaxPostData, function (k, v) {
+				postedData[k] = v;
+			});
+		}
+		
+		initPager(paramObj.pagerType, paramObj.trans, timeout);
+		getData(1, paramObj.remoteUrl, paramObj.pagerType, ajaxPostData, timeout);
+
+		function populatePagerSelect(data){
+			var returnData = [];
+			$.each(data,function(key,val){
+				returnData.push({
+					id: val,
+					text: String(val)
+				});
+			});
+			return returnData;
+		}
+
+		function initPager(pagertype, trans, waiting) {
+			var container = paramObj.container;
+				
+			if(paramObj.options.pageSizeSelect != undefined){
+				csgPagerSizesDropdown = container.find('.csg-pager-sizes').contrailDropdown({
+					placeholder: 'Select..',
+					data: populatePagerSelect(paramObj.options.pageSizeSelect),
+					change: function(e){
+						var pageIndex = 1;
+						getData(pageIndex, paramObj.remoteUrl, pagertype, ajaxPostData, waiting);
+		
+						var pagesize = parseInt(e.val);
+						var total = parseInt(paramObj.container.find('.totalrecords').text());
+						var totalpages = parseInt(Math.floor(parseFloat(total / pagesize)) + 1);
+						csgCurrentPageDropDown = paramObj.container.find('.csg-current-page').contrailDropdown({ 
+							data: populateCurrentPageSelect(totalpages),
+							placeholder: 'Select..',
+							change: function(e){
+								var pageIndex = e.val;
+								if (pageIndex < 1) {
+									pageIndex = 1;
+								}
+								if (pageIndex > parseInt(paramObj.container.find('.csg-total-page-count').text())) {
+									pageIndex = parseInt(paramObj.container.find('.csg-total-page-count').text());
+								}
+								csgCurrentPageDropDown.value(String(pageIndex));
+								getData(pageIndex, paramObj.remoteUrl, pagertype, ajaxPostData, waiting);
+							}
+						});
+						csgCurrentPageDropDown.value('1');
+					}
+				}).data('contrailDropdown');
+				csgPagerSizesDropdown.value(String(paramObj.options.pageSize));
+			} else {
+				container.find('.csg-pager-sizes').append(paramObj.options.pageSize + ' Records');
+				container.find('.csg-pager-sizes').width(60);
+			}
+
+			container.find(".slick-pager-info").empty().append('Total: <span class="totalrecords"></span> records');
+
+			container.find(".pager-control-first").click(function () {
+				var pageIndex = 1;
+				getData(pageIndex, paramObj.remoteUrl, pagertype, ajaxPostData, waiting);
+			});
+			container.find(".pager-control-prev").click(function () {
+				if (isNaN(parseInt(csgCurrentPageDropDown.value()))) {
+					csgCurrentPageDropDown.value('1');
+				}
+				var pageIndex = parseInt(csgCurrentPageDropDown.value()) - 1;
+				if (pageIndex < 1) {
+					pageIndex = 1;
+				}
+				getData(pageIndex, paramObj.remoteUrl, pagertype, ajaxPostData, waiting);
+			});
+			container.find(".pager-control-next").click(function () {
+				if (isNaN(parseInt(csgCurrentPageDropDown.value()))) {
+					csgCurrentPageDropDown.value('1');
+				}
+				var pageIndex = parseInt(csgCurrentPageDropDown.value()) + 1;
+				if (pageIndex > parseInt(paramObj.container.find('.csg-total-page-count').text())) {
+					pageIndex = parseInt(paramObj.container.find('.csg-total-page-count').text());
+				}
+				getData(pageIndex, paramObj.remoteUrl, pagertype, ajaxPostData, waiting);
+			});
+			container.find(".pager-control-last").click(function () {
+				var pageIndex = parseInt(paramObj.container.find('.csg-total-page-count').text());
+				getData(pageIndex, paramObj.remoteUrl, pagertype, ajaxPostData, waiting);
+			});
+			
+            if(sortable != null && sortable) {
+                paramObj.datagrid.onSort.subscribe(function (e, args) {
+                	var argsSortColsField = (args.multiColumnSort) ? args.sortCols[0].sortCol.field : args.sortCol.field,
+                    	sortAsc = (args.multiColumnSort) ? args.sortCols[0].sortAsc : args.sortAsc;
+                        sortDir = sortAsc ? 'asc' : 'desc',
+                        sortOptions = [{field: argsSortColsField, dir: sortDir}],
+                        pageNumber = csgCurrentPageDropDown.value();
+                    if (isNaN(parseInt(pageNumber))) {
+                        pageNumber = '1';
+                        csgCurrentPageDropDown.value(pageNumber);
                     }
-                    var changedvalue = parseInt($(".currentpage").val()) - 1;
-                    if (changedvalue < 1) {
-                        changedvalue = 1;
-                    }
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                });
-                $(".resultset_next").click(function () {
-                    if (isNaN(parseInt($(".currentpage").val()))) {
-                        $(".currentpage").val(1);
-                    }
-                    var changedvalue = parseInt($(".currentpage").val()) + 1;
-                    if (changedvalue > parseInt($("#totalpages").text())) {
-                        changedvalue = parseInt($("#totalpages").text());
-                    }
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                });
-                $(".resultset_last").click(function () {
-                    var changedvalue = parseInt($("#totalpages").text());
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                });
-            }
-            $('.recordsperpage').dropkick({
-                change: function (value, label) {
-                    var changedvalue = 1;
-                    getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-                }
-            });
-            $(".refresh").click(function () {
-                if (isNaN(parseInt($(".currentpage").val()))) {
-                    $(".currentpage").val(1);
-                }
-                var changedvalue = parseInt($(".currentpage").val());
-                if (changedvalue < 1) {
-                    changedvalue = 1;
-                }
-                if (changedvalue > parseInt($("#totalpages").text())) {
-                    changedvalue = parseInt($("#totalpages").text());
-                }
-                getData(changedvalue, paramObj.remoteUrl, pagertype, paramObj.params, waiting);
-            });
-            $(".currentrecords").click(function () {
-                $(".recordstate").toggle("fast");
-            });
-        }
-        function getData(changedvalue, url, pagertype, params, waiting) {
-            var pagesize = $('.recordsperpage').val();
-            var pageindex = changedvalue;
-            var postedData = {};
-            postedData['pageSize'] = pagesize;
-            postedData['pageIndex'] = pageindex;
-            if (params !== null && params != undefined) {
-                $.each(params, function (k, v) {
-                    postedData[k] = $(v).val();
+                    getData(pageNumber, paramObj.remoteUrl, pagertype, ajaxPostData, waiting, sortOptions);
                 });
             }
-            $.ajax({
-                url: url,
-                type: 'POST',
-                cache: false,
-                dataType: "text",
-                crossDomain: true,
-                data: postedData,
-                timeout: waiting,
-                beforeSend: function() {
-                    $("#dataloading").attr("disabled","disabled");
-                    $('#dataloading').removeClass('refresh');
-                    $('#dataloading').addClass('dataloading');
-                },
-                error: function (XMLHttpRequest, textStatus, errorThrown) {
-                    paramObj.container.html('<span style="position:absolute;top:5px;left:5px;color:red;">Error!&nbsp;' + errorThrown + '</span>');
-                },
-                success: function (data) {
-                    var total = $.evalJSON(data).Total;
-                    var rows = $.evalJSON($.evalJSON(data).Rows);
-                    paramObj.datagrid.setData(rows);
-                    paramObj.datagrid.render();
-                    $(".currentpage").css("width", changedvalue.toString().length * 7 + "px");
-                    $(".currentpage").val(changedvalue);
-                    var currentvalue = changedvalue;
-                    var pagesize = parseInt($('.recordsperpage').val());
-                    var fromvalue = (currentvalue - 1) * pagesize + 1;
-                    var tovalue = fromvalue + pagesize - 1;
-                    if (tovalue > total) {
-                        tovalue = total;
-                    }
-                    $("#recordsegment").text(fromvalue + "-" + tovalue);
-                    $("#totalrecords").text(total);
-                    var totalpages = parseInt(Math.floor(parseFloat(total / pagesize)) + 1);
-                    $("#totalpages").text(totalpages);
-                    if (pagertype == "slider") {
-                        $(".pagerslider").slider("value", changedvalue);
-                        $(".pagerslider").slider("option", "max", totalpages);
-                    }
-                    $("#dataloading").removeAttr("disabled");
-                    $('#dataloading').removeClass('dataloading');
-                    $('#dataloading').addClass('refresh');
-                }
-            });
-        }
-    }
-    $.extend(true, window, { Slick: { Controls: { EnhancementPager: EnhancementPager}} });
+		}
+
+		function populateCurrentPageSelect(n){
+			var returnData = [];
+			for(var i = 1 ; i <= n ; i++){
+				returnData.push({
+					id: i,
+					text: 'Page ' + String((i))
+				});
+			}
+			return returnData;
+		};
+
+		function getData(pageIndex, url, pagertype, ajaxPostData, timeout, sortOptions) {
+			var pagesize = parseInt((paramObj.options.pageSizeSelect != undefined) ? csgPagerSizesDropdown.value() : paramObj.options.pageSize);
+			postedData['pageSize'] = pagesize;
+			postedData['page'] = pageIndex;
+			if (ajaxPostData !== null && ajaxPostData != undefined) {
+				$.each(ajaxPostData, function (k, v) {
+					postedData[k] = v;
+				});
+                if(sortable) {
+                   postedData['sort'] = sortOptions;
+                }
+			}
+			$.ajax({
+				url: url,
+				type: gridDSConfig.requestType,
+				cache: false,
+				dataType: "json",
+				crossDomain: true,
+				data: postedData,
+				timeout: timeout,
+				beforeSend: function() {
+					paramObj.datagrid.setData([], true);
+					paramObj.datagrid.render();
+					paramObj.gridContainer.data('contrailGrid').showGridMessage('loading');
+					paramObj.gridContainer.find('.grid-footer').hide();
+					if(events.onRequestStartCB && typeof events.onRequestStartCB === 'function') {
+                        events.onRequestStartCB();
+                    }
+				},
+				error: function (xhr) {
+					var errorMsg = contrail.parseErrorMsgFromXHR(xhr);
+                    if(xhr.status && xhr.statusText != 'abort') {
+                        showMessagePopup('Error', 'Error: ' + errorMsg);
+                        paramObj.gridContainer.data('contrailGrid').showGridMessage('Error','Error: ' + errorMsg);
+                    }
+					if(events.onRequestErrorCB && typeof events.onRequestErrorCB === 'function') {
+                        events.onRequestErrorCB();
+                    }
+				},
+				success: function (results) {
+					var requestSuccessFlag = true;
+					if(events.onRequestSuccessCB && typeof events.onRequestSuccessCB === 'function') {
+                        requestSuccessFlag = events.onRequestSuccessCB(results);
+                    }
+					if(requestSuccessFlag != false) {
+						if(typeof results.total === 'undefined' || results.total == 0){
+							paramObj.gridContainer.data('contrailGrid').showGridMessage('empty');
+						}
+						else{
+							setTimeout(function(){
+								paramObj.gridContainer.data('contrailGrid').removeGridMessage();
+								paramObj.gridContainer.find('.grid-footer').show();
+							
+								var total = results.total;
+								var rows = results.data;
+								
+								if (rows.length > 0 && rows[0].cgrid == undefined) {
+					            	$.each(rows, function (key, val) {
+										rows[key].cgrid = 'id_' + key;
+						            });
+						        }
+								
+								paramObj.datagrid.setData(rows, true);
+								paramObj.datagrid.render();
+			
+								var pagesize = parseInt((paramObj.options.pageSizeSelect != undefined) ? paramObj.container.find('.csg-pager-sizes').select2('val') : paramObj.options.pageSize);
+			
+								if(total == parseInt(paramObj.container.find('.totalrecords').text()) || pageIndex == 1){
+									paramObj.container.find('.totalrecords').text(total);
+									var totalpages = parseInt(Math.ceil(parseFloat(total / pagesize)));
+			
+									var currentPageSelectData = populateCurrentPageSelect(totalpages);
+									csgCurrentPageDropDown = paramObj.container.find('.csg-current-page').contrailDropdown({ 
+										val: '1',
+										data: currentPageSelectData,
+										placeholder: 'Select..',
+										change: function(e){
+											var changedPageIndex = e.val;
+											if (changedPageIndex < 1) {
+												changedPageIndex = 1;
+											}
+											if (changedPageIndex > parseInt(paramObj.container.find('.csg-total-page-count').text())) {
+												changedPageIndex = parseInt(paramObj.container.find('.csg-total-page-count').text());
+											}
+											csgCurrentPageDropDown.value(String(changedPageIndex));
+											getData(changedPageIndex, paramObj.remoteUrl, pagertype, ajaxPostData, timeout);
+										}
+									}).data('contrailDropdown');
+									
+									csgCurrentPageDropDown.value(String(pageIndex));
+			
+									paramObj.container.find('.csg-total-page-count').text(totalpages);
+									paramObj.container.find('.slick-pager').show();
+									
+									if(events.onDataBoundCB && typeof events.onDataBoundCB === 'function') {
+			                			events.onDataBoundCB();
+			            			}
+								}
+								paramObj.gridContainer.data('contrailGrid').adjustAllRowHeight();
+							}, 500);					
+						}
+					}
+				}
+			});
+		}
+	}
+	$.extend(true, window, { Slick: { Controls: { EnhancementPager: EnhancementPager}} });
 })(jQuery);
\ No newline at end of file
