--- node_modules/JSONPath/lib/jsonpath.js	2015-01-30 11:03:53.000000000 +0530
+++ node_modules/JSONPath/lib/jsonpath.js	2015-01-30 11:05:04.000000000 +0530
@@ -1,32 +1,23 @@
-/* JSONPath 0.8.0 - XPath for JSON
+/* JSONPath 0.8.5 - XPath for JSON
  *
  * Copyright (c) 2007 Stefan Goessner (goessner.net)
  * Licensed under the MIT (MIT-LICENSE.txt) licence.
+ *
+ * Proposal of Chris Zyp goes into version 0.9.x
+ * Issue 7 resolved
  */
-
-var vm = require('vm'),
-    _ = require('underscore');
 exports.eval = jsonPath;
-var cache = {};
 function jsonPath(obj, expr, arg) {
    var P = {
       resultType: arg && arg.resultType || "VALUE",
-      flatten: arg && arg.flatten || false,
-      wrap: (arg && arg.hasOwnProperty('wrap')) ? arg.wrap : true,
-      sandbox: (arg && arg.sandbox) ? arg.sandbox : {},
+      result: [],
       normalize: function(expr) {
-         if(cache[expr]) {
-            return cache[expr];
-         }
-
          var subx = [];
-         var ret = expr.replace(/[\['](\??\(.*?\))[\]']/g, function($0,$1){return "[#"+(subx.push($1)-1)+"]";})
+         return expr.replace(/[\['](\??\(.*?\))[\]']|\['(.*?)'\]/g, function($0,$1,$2){return "[#"+(subx.push($1||$2)-1)+"]";})  /* http://code.google.com/p/jsonpath/issues/detail?id=4 */
                     .replace(/'?\.'?|\['?/g, ";")
                     .replace(/;;;|;;/g, ";..;")
                     .replace(/;$|'?\]|'$/g, "")
                     .replace(/#([0-9]+)/g, function($0,$1){return subx[$1];});
-         cache[expr] = ret;
-         return ret;
       },
       asPath: function(path) {
          var x = path.split(";"), p = "$";
@@ -35,36 +26,11 @@
          return p;
       },
       store: function(p, v) {
-         if (p) {
-             if (P.resultType == "PATH") {
-                 P.result[P.result.length] = P.asPath(p);
-             }
-             else {
-                 if(_.isArray(v) && P.flatten) {
-                     if(!P.result) P.result = [];
-                     if(!_.isArray(P.result)) P.result = [P.result];
-                     P.result = P.result.concat(v);
-                 }
-                 else {
-                     if(P.result) {
-                         if(!_.isArray(P.result)) P.result = [P.result];
-                         if(_.isArray(v) && P.flatten) {
-                             P.result = P.result.concat(v);
-                         }
-                         else {
-                             P.result[P.result.length] = v;
-                         }
-                     }
-                     else {
-                         P.result = v;
-                     }
-                 }
-             }
-         }
+         if (p) P.result[P.result.length] = P.resultType == "PATH" ? P.asPath(p) : v;
          return !!p;
       },
       trace: function(expr, val, path) {
-         if (expr) {
+         if (expr !== "") {
             var x = expr.split(";"), loc = x.shift();
             x = x.join(";");
             if (val && val.hasOwnProperty(loc))
@@ -75,16 +41,16 @@
                P.trace(x, val, path);
                P.walk(loc, x, val, path, function(m,l,x,v,p) { typeof v[m] === "object" && P.trace("..;"+x,v[m],p+";"+m); });
             }
-            else if (/,/.test(loc)) { // [name1,name2,...]
-               for (var s=loc.split(/'?,'?/),i=0,n=s.length; i<n; i++)
-                  P.trace(s[i]+";"+x, val, path);
-            }
             else if (/^\(.*?\)$/.test(loc)) // [(expr)]
                P.trace(P.eval(loc, val, path.substr(path.lastIndexOf(";")+1))+";"+x, val, path);
             else if (/^\?\(.*?\)$/.test(loc)) // [?(expr)]
-               P.walk(loc, x, val, path, function(m,l,x,v,p) { if (P.eval(l.replace(/^\?\((.*?)\)$/,"$1"),v[m],m)) P.trace(m+";"+x,v,p); });
+               P.walk(loc, x, val, path, function(m,l,x,v,p) { if (P.eval(l.replace(/^\?\((.*?)\)$/,"$1"), v instanceof Array ? v[m] : v, m)) P.trace(m+";"+x,v,p); }); // issue 5 resolved
             else if (/^(-?[0-9]*):(-?[0-9]*):?([0-9]*)$/.test(loc)) // [start:end:step]  phyton slice syntax
                P.slice(loc, x, val, path);
+            else if (/,/.test(loc)) { // [name1,name2,...]
+               for (var s=loc.split(/'?,'?/),i=0,n=s.length; i<n; i++)
+                  P.trace(s[i]+";"+x, val, path);
+            }
          }
          else
             P.store(path, val);
@@ -112,22 +78,14 @@
          }
       },
       eval: function(x, _v, _vname) {
-         P.sandbox["_v"] = _v;
-         try {
-             return $ && _v && vm.runInNewContext(x.replace(/@/g, "_v"), P.sandbox);
-         }
-         catch(e) {
-             console.log(e);
-             throw new SyntaxError("jsonPath: " + e.message + ": " + x.replace(/@/g, "_v").replace(/\^/g, "_a"));
-         }
+         try { return $ && _v && eval(x.replace(/(^|[^\\])@/g, "$1_v").replace(/\\@/g, "@")); }  // issue 7 : resolved ..
+         catch(e) { throw new SyntaxError("jsonPath: " + e.message + ": " + x.replace(/(^|[^\\])@/g, "$1_v").replace(/\\@/g, "@")); }  // issue 7 : resolved ..
       }
    };
-   P.result = P.wrap === true ? [] : undefined;
 
    var $ = obj;
    if (expr && obj && (P.resultType == "VALUE" || P.resultType == "PATH")) {
-      P.trace(P.normalize(expr).replace(/^\$;/,""), obj, "$");
-      if(!_.isArray(P.result) && P.wrap) P.result = [P.result];
-      return P.result ? P.result : false;
+      P.trace(P.normalize(expr).replace(/^\$;?/,""), obj, "$");  // issue 6 resolved
+      return P.result.length ? P.result : false;
    }
 } 
