diff -Naur old/backbone-validation-amd.js new/backbone-validation-amd.js
--- old/backbone-validation-amd.js	2014-03-28 14:45:08.000000000 -0700
+++ new/backbone-validation-amd.js	2014-12-19 12:44:12.000000000 -0800
@@ -97,8 +97,8 @@
       // Returns an object with undefined properties for all
       // attributes on the model that has defined one or more
       // validation rules.
-      var getValidatedAttrs = function(model) {
-        return _.reduce(_.keys(_.result(model, 'validation') || {}), function(memo, key) {
+      var getValidatedAttrs = function(model, validationName) {
+        return _.reduce(_.keys(_.result(model, validationName) || {}), function(memo, key) {
           memo[key] = void 0;
           return memo;
         }, {});
@@ -107,8 +107,8 @@
       // Looks on the model for validations for a specified
       // attribute. Returns an array of any validators defined,
       // or an empty array if none is defined.
-      var getValidators = function(model, attr) {
-        var attrValidationSet = model.validation ? _.result(model, 'validation')[attr] || {} : {};
+      var getValidators = function(model, attr, validation) {
+        var attrValidationSet = _.result(model, validation) ? _.result(model, validation)[attr] || {} : {};
   
         // If the validator is a function or a string, wrap it in a function validator
         if (_.isFunction(attrValidationSet) || _.isString(attrValidationSet)) {
@@ -141,16 +141,16 @@
       // for that attribute. If one or more errors are found,
       // the first error message is returned.
       // If the attribute is valid, an empty string is returned.
-      var validateAttr = function(model, attr, value, computed) {
+      var validateAttr = function(model, attr, value, computed, validation) {
         // Reduces the array of validators to an error message by
         // applying all the validators and returning the first error
         // message, if any.
-        return _.reduce(getValidators(model, attr), function(memo, validator){
+        return _.reduce(getValidators(model, attr, validation), function(memo, validator){
           // Pass the format functions plus the default
           // validators as the context to the validator
           var ctx = _.extend({}, formatFunctions, defaultValidators),
               result = validator.fn.call(ctx, value, attr, validator.val, model, computed);
-  
+
           if(result === false || memo === false) {
             return false;
           }
@@ -164,15 +164,15 @@
       // Loops through the model's attributes and validates them all.
       // Returns and object containing names of invalid attributes
       // as well as error messages.
-      var validateModel = function(model, attrs) {
+      var validateModel = function(model, attrs, validation) {
         var error,
             invalidAttrs = {},
             isValid = true,
             computed = _.clone(attrs),
             flattened = flatten(attrs);
-  
+
         _.each(flattened, function(val, attr) {
-          error = validateAttr(model, attr, val, computed);
+          error = validateAttr(model, attr, val, computed, validation);
           if (error) {
             invalidAttrs[attr] = error;
             isValid = false;
@@ -191,9 +191,10 @@
   
           // Check whether or not a value, or a hash of values
           // passes validation without updating the model
-          preValidate: function(attr, value) {
+          preValidate: function(attr, value, validationName) {
             var self = this,
                 result = {},
+                validation = validationName == null ? 'validation' : validationName,
                 error;
   
             if(_.isObject(attr)){
@@ -207,43 +208,45 @@
               return _.isEmpty(result) ? undefined : result;
             }
             else {
-              return validateAttr(this, attr, value, _.extend({}, this.attributes));
+              return validateAttr(this, attr, value, _.extend({}, this.attributes), validation);
             }
           },
   
           // Check to see if an attribute, an array of attributes or the
           // entire model is valid. Passing true will force a validation
           // of the model.
-          isValid: function(option) {
-            var flattened = flatten(this.attributes);
-  
+          isValid: function(option, validationName) {
+            var flattened = flatten(this.attributes),
+                validation = validationName == null ? 'validation' : validationName;
+
             if(_.isString(option)){
-              return !validateAttr(this, option, flattened[option], _.extend({}, this.attributes));
+              return validateAttr(this, option, flattened[option], _.extend({}, this.attributes), validation);
             }
             if(_.isArray(option)){
               return _.reduce(option, function(memo, attr) {
-                return memo && !validateAttr(this, attr, flattened[attr], _.extend({}, this.attributes));
+                return memo && !validateAttr(this, attr, flattened[attr], _.extend({}, this.attributes), validation);
               }, true, this);
             }
             if(option === true) {
-              this.validate();
+              this.validate(null, null, validationName);
             }
-            return this.validation ? this._isValid : true;
+            return  _.result(this, validation) ? this._isValid : true;
           },
   
           // This is called by Backbone when it needs to perform validation.
           // You can call it manually without any parameters to validate the
           // entire model.
-          validate: function(attrs, setOptions){
+          validate: function(attrs, setOptions, validationName){
             var model = this,
                 validateAll = !attrs,
                 opt = _.extend({}, options, setOptions),
-                validatedAttrs = getValidatedAttrs(model),
+                validatedAttrs = getValidatedAttrs(model, validationName),
                 allAttrs = _.extend({}, validatedAttrs, model.attributes, attrs),
                 changedAttrs = flatten(attrs || allAttrs),
+                validation = validationName == null ? 'validation' : validationName,
   
-                result = validateModel(model, allAttrs);
-  
+                result = validateModel(model, allAttrs, validation);
+
             model._isValid = result.isValid;
   
             // After validation is performed, loop through all validated attributes
@@ -262,7 +265,7 @@
                   changed = changedAttrs.hasOwnProperty(attr);
   
               if(invalid && (changed || validateAll)){
-                opt.invalid(view, attr, result.invalidAttrs[attr], opt.selector);
+                opt.invalid(view, attr, result.invalidAttrs[attr], opt.selector, validation);
               }
             });
   
@@ -299,13 +302,13 @@
       // Mix in validation on a model whenever a model is
       // added to a collection
       var collectionAdd = function(model) {
-        bindModel(this.view, model, this.options);
+        bindModel(this.view, model.attributes.model(), this.options);
       };
   
       // Remove validation from a model whenever a model is
       // removed from a collection
       var collectionRemove = function(model) {
-        unbindModel(model);
+        unbindModel(model.attributes.model());
       };
   
       // Returns the public methods on Backbone.Validation
@@ -324,20 +327,20 @@
         bind: function(view, options) {
           options = _.extend({}, defaultOptions, defaultCallbacks, options);
   
-          var model = options.model || view.model,
+          var model = view.model.model(),
               collection = options.collection || view.collection;
-  
-          if(typeof model === 'undefined' && typeof collection === 'undefined'){
+
+          if(typeof view.model === 'undefined' && typeof collection === 'undefined'){
             throw 'Before you execute the binding your view must have a model or a collection.\n' +
                   'See http://thedersen.com/projects/backbone-validation/#using-form-model-validation for more information.';
           }
   
-          if(model) {
+          if(view.model !== 'undefined' && model) {
             bindModel(view, model, options);
           }
-          else if(collection) {
+          if(typeof collection !== 'undefined' && collection) {
             collection.each(function(model){
-              bindModel(view, model, options);
+              bindModel(view, model.attributes.model(), options);
             });
             collection.bind('add', collectionAdd, {view: view, options: options});
             collection.bind('remove', collectionRemove);
@@ -350,13 +353,13 @@
           options = _.extend({}, options);
           var model = options.model || view.model,
               collection = options.collection || view.collection;
-  
-          if(model) {
+
+          if(view.model !== 'undefined' && model) {
             unbindModel(model);
           }
-          else if(collection) {
+          if(typeof collection !== 'undefined' && collection) {
             collection.each(function(model){
-              unbindModel(model);
+              unbindModel(model.attributes.model());
             });
             collection.unbind('add', collectionAdd);
             collection.unbind('remove', collectionRemove);
